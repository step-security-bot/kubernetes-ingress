name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main
      - release-*
    types:
      - opened
      - reopened
      - synchronize
  schedule:
    - cron: '0 4 * * *' # run every day at 04:00 UTC

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.ref_name }}-ci
  cancel-in-progress: true

jobs:

  checks:
    name: Checks and variables
    runs-on: ubuntu-22.04
    outputs:
      go_path: ${{ steps.go.outputs.go_path }}
      k8s_latest: ${{ steps.vars.outputs.k8s_latest }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@03bee3930647ebbf994244c21ddbc0d4933aab4f # v2.3.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout Repository
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
      - name: Output Variables
        id: vars
        run: |
          echo "k8s_latest=$(grep -m1 'FROM kindest/node' <tests/docker/Dockerfile | awk -F'[:v]' '{print $3}')" >> $GITHUB_OUTPUT
      - name: Setup Golang Environment
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version-file: go.mod
      - name: Determine GOPATH
        id: go
        run: echo "go_path=$(go env GOPATH)" >> $GITHUB_OUTPUT
      - name: Check if go.mod and go.sum are up to date
        run: |
          go mod tidy && git diff --exit-code -- go.mod go.sum
      - name: Check if CRDs changed
        run: |
          make update-crds && git diff --name-only --exit-code deployments/common/crds* deployments/helm-chart/crds*
      - name: Check if Codegen changed
        run: |
          cd ../.. && mkdir -p github.com/nginxinc && mv kubernetes-ingress/kubernetes-ingress github.com/nginxinc/ && cd github.com/nginxinc/kubernetes-ingress
          make update-codegen && git diff --name-only --exit-code pkg/**
          cd ../../.. && mv github.com/nginxinc/kubernetes-ingress kubernetes-ingress/kubernetes-ingress

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-22.04
    needs: checks
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@03bee3930647ebbf994244c21ddbc0d4933aab4f # v2.3.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout Repository
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
      - name: Setup Golang Environment
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version-file: go.mod
      - name: Run Tests
        run: make cover
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@d9f34f8cd5cb3b3eb79b3e4b5dae3a16df499a70 # v3.1.1
        with:
          files: ./coverage.txt

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    uses: ./.github/workflows/release.yml
    secrets: inherit

  binaries:
    name: Build Binaries
    runs-on: ubuntu-22.04
    needs: [checks, unit-tests]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@03bee3930647ebbf994244c21ddbc0d4933aab4f # v2.3.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout Repository
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
        with:
          fetch-depth: 0

      - name: Setup Golang Environment
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version-file: go.mod

      - name: Download Syft
        uses: anchore/sbom-action/download-syft@422cb34a0f8b599678c41b21163ea6088edb2624 # v0.14.1
        if: startsWith(github.ref, 'refs/tags/')

      - name: Build binaries
        uses: goreleaser/goreleaser-action@f82d6c1c344bcacabba2c841718984797f664a6b # v4.2.0
        with:
          version: latest
          args: ${{ startsWith(github.ref, 'refs/tags/') && 'release' || 'build --snapshot' }} ${{ github.event_name == 'pull_request' && '--single-target' || '' }} --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ needs.checks.outputs.go_path }}
          AWS_PRODUCT_CODE: ${{ secrets.AWS_PRODUCT_CODE }}
          AWS_PUB_KEY: ${{ secrets.AWS_PUB_KEY }}
          AWS_NAP_DOS_PRODUCT_CODE: ${{ secrets.AWS_NAP_DOS_PRODUCT_CODE }}
          AWS_NAP_DOS_PUB_KEY: ${{ secrets.AWS_NAP_DOS_PUB_KEY }}
          AWS_NAP_WAF_PRODUCT_CODE: ${{ secrets.AWS_NAP_WAF_PRODUCT_CODE }}
          AWS_NAP_WAF_PUB_KEY: ${{ secrets.AWS_NAP_WAF_PUB_KEY }}
          AWS_NAP_WAF_DOS_PRODUCT_CODE: ${{ secrets.AWS_NAP_WAF_DOS_PRODUCT_CODE }}
          AWS_NAP_WAF_DOS_PUB_KEY: ${{ secrets.AWS_NAP_WAF_DOS_PUB_KEY }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_COMMUNITY }}
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
          AZURE_BUCKET_NAME: ${{ secrets.AZURE_BUCKET_NAME }}

      - name: Store Artifacts in Cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}

  helm-tests:
    name: Helm Tests
    runs-on: ubuntu-22.04
    needs: [checks, binaries]
    strategy:
      matrix:
        include:
         - image: debian
           type: oss
         - image: debian-plus
           type: plus
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@03bee3930647ebbf994244c21ddbc0d4933aab4f # v2.3.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout Repository
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
      - name: Fetch Cached Artifacts
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2.5.0
      - name: Build Docker Image ${{ matrix.image }}
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4.0.0
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=gha,scope=${{ matrix.image }}
          target: goreleaser
          tags: ${{ matrix.type }}:${{ github.sha }}
          pull: true
          load: true
          build-args: |
            BUILD_OS=${{ matrix.image }}
            IC_VERSION=CI
          secrets: |
            ${{ contains(matrix.type, 'plus') && format('"nginx-repo.crt={0}"', secrets.NGINX_CRT) || '' }}
            ${{ contains(matrix.type, 'plus') && format('"nginx-repo.key={0}"', secrets.NGINX_KEY) || '' }}
      - name: Deploy Kubernetes
        id: k8s
        run: |
          kind create cluster --name ${{ github.run_id }} --image=kindest/node:v${{ needs.checks.outputs.k8s_latest }} --wait 75s
          kind load docker-image ${{ matrix.type }}:${{ github.sha }} --name ${{ github.run_id }}
      - name: Install Chart
        run: >
          helm install
          ${{ matrix.type }}
          .
          --set controller.image.repository=${{ matrix.type }}
          --set controller.image.tag=${{ github.sha }}
          --set controller.service.type=NodePort
          --set controller.nginxplus=${{ contains(matrix.type, 'plus') && 'true' || 'false' }}
          --wait
        working-directory: ${{ github.workspace }}/deployments/helm-chart
      - name: Expose Test Ingresses
        run: |
          kubectl port-forward service/${{ matrix.type }}-nginx-ingress-controller 8080:80 8443:443 &
      - name: Test HTTP
        run: |
          counter=0
          max_attempts=5
          until [ $(curl --write-out %{http_code} -s --output /dev/null http://localhost:8080) -eq 404 ]; do
            if [ ${counter} -eq ${max_attempts} ]; then
              exit 1
            fi
            printf '.'; counter=$(($counter+1)); sleep 5;
          done
      - name: Test HTTPS
        run: |
          counter=0
          max_attempts=5
          until [ $(curl --write-out %{http_code} -ks --output /dev/null https://localhost:8443) -eq 000 ]; do
            if [ ${counter} -eq ${max_attempts} ]; then
              exit 1
            fi
            printf '.'; counter=$(($counter+1)); sleep 5;
          done

  setup-matrix:
    name: Setup Matrix for Smoke Tests
    runs-on: ubuntu-22.04
    needs: [checks, binaries]
    if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@03bee3930647ebbf994244c21ddbc0d4933aab4f # v2.3.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" != "schedule" ]; then
            echo "matrix={\"images\": \
                                                [{\"image\": \"debian\", \"marker\": \"ingresses\"}, \
                                                {\"image\": \"alpine\", \"marker\":\"vsr\"}, \
                                                {\"image\": \"alpine\", \"marker\":\"policies\"}, \
                                                {\"image\": \"debian\", \"marker\": \"vs\"}, \
                                                {\"image\": \"ubi\", \"marker\": \"ts\"}, \
                                                {\"image\": \"debian-plus\", \"marker\": \"vs\"}, \
                                                {\"image\": \"debian-plus\", \"marker\": \"ts\"}, \
                                                {\"image\": \"alpine-plus\", \"marker\":\"ingresses\"}, \
                                                {\"image\": \"alpine-plus\", \"marker\": \"vsr\"}, \
                                                {\"image\": \"ubi-plus\", \"marker\": \"policies\"}, \
                                                {\"image\": \"debian-plus-nap\", \"marker\": \"dos\"}, \
                                                {\"image\": \"debian-plus-nap\", \"marker\": \"appprotect\"}], \
                                              \"k8s\": [\"${{ needs.checks.outputs.k8s_latest }}\"]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"k8s\": [\"1.22.15\", \"1.23.13\", \"1.24.7\", \"1.25.3\", \"${{ needs.checks.outputs.k8s_latest }}\"], \
                                             \"images\": [{\"image\": \"debian\"}, {\"image\": \"debian-plus\"}]}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Repository
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
      - name: Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2.5.0
      - name: Build Test-Runner Container
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4.0.0
        with:
          file: tests/docker/Dockerfile
          context: '.'
          cache-from: type=gha,scope=test-runner
          cache-to: type=gha,scope=test-runner,mode=max
          tags: test-runner:${{ github.sha }}
          pull: true
          load: true

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-22.04
    needs: setup-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup-matrix.outputs.matrix) }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@03bee3930647ebbf994244c21ddbc0d4933aab4f # v2.3.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout Repository
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
      - name: Run Smoke Tests
        id: smoke-tests
        uses: ./.github/actions/smoke-tests
        with:
          image: ${{ matrix.images.image != '' && matrix.images.image || 'debian' }}
          marker: ${{ matrix.images.marker != '' && matrix.images.marker || '' }}
          k8s-version: ${{ matrix.k8s }}
          nginx-crt: ${{ contains(matrix.images.image, 'nap') && secrets.NGINX_AP_CRT || secrets.NGINX_CRT }}
          nginx-key: ${{ contains(matrix.images.image, 'nap') && secrets.NGINX_AP_KEY || secrets.NGINX_KEY }}
          azure-ad-secret: ${{ secrets.AZURE_AD_AUTOMATION }}
      - name: Upload Test Results
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: ${{ steps.smoke-tests.outputs.test-results-name }}
          path: ${{ github.workspace }}/tests/${{ steps.smoke-tests.outputs.test-results-name }}.html
        if: always()

  build-docker:
    name: Build Docker OSS
    needs: smoke-tests
    strategy:
        fail-fast: false
        matrix:
          image: [debian, alpine]
          platforms: ["linux/arm, linux/arm64, linux/amd64, linux/ppc64le, linux/s390x"]
          include:
            - image: ubi
              platforms: "linux/arm64, linux/amd64, linux/ppc64le, linux/s390x"
    uses: ./.github/workflows/build-oss.yml
    with:
      platforms: ${{ matrix.platforms }}
      image: ${{ matrix.image }}
    secrets: inherit

  build-docker-plus:
    name: Build Docker Plus
    needs: build-docker
    strategy:
        fail-fast: false
        matrix:
          image: [debian-plus, alpine-plus]
          platforms: ["linux/arm64, linux/amd64"]
          target: [goreleaser, aws]
          include:
            - image: ubi-plus
              platforms: "linux/arm64, linux/amd64, linux/s390x"
              target: goreleaser
    uses: ./.github/workflows/build-plus.yml
    with:
      platforms: ${{ matrix.platforms }}
      image: ${{ matrix.image }}
      target: ${{ matrix.target }}
    secrets: inherit

  build-docker-nap:
    name: Build Docker NAP
    needs: build-docker-plus
    strategy:
        fail-fast: false
        matrix:
          image: [debian-plus-nap, ubi-plus-nap]
          platforms: ["linux/amd64"]
          target: [goreleaser, aws]
          nap_modules: [dos, waf, "waf,dos"]
    uses: ./.github/workflows/build-plus.yml
    with:
      platforms: ${{ matrix.platforms }}
      image: ${{ matrix.image }}
      target: ${{ matrix.target }}
      nap_modules: ${{ matrix.nap_modules }}
    secrets: inherit

  publish-helm:
    name: Package and Publish Helm Chart
    runs-on: ubuntu-22.04
    needs: helm-tests
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@03bee3930647ebbf994244c21ddbc0d4933aab4f # v2.3.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout Repository
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
        with:
          path: kic

      - name: Login to GitHub Container Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: DockerHub Login
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Package
        id: package
        run: |
          output=$(helm package ${{ ! startsWith(github.ref, 'refs/tags/') && '--app-version edge --version 0.0.0-edge' || '' }} kic/deployments/helm-chart)
          echo "path=$(basename -- $(echo $output | cut -d: -f2))" >> $GITHUB_OUTPUT

      - name: Push to OCI registries
        run: |
          helm push ${{ steps.package.outputs.path }} oci://ghcr.io/nginxinc/charts
          helm push ${{ steps.package.outputs.path }} oci://registry-1.docker.io/nginxcharts

      - name: Checkout Repository
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
        with:
          repository: nginxinc/helm-charts
          fetch-depth: 1
          token: ${{ secrets.NGINX_PAT }}
          path: helm-charts

      - name: Get Chart type
        id: package-helm
        run: |
          echo "type=${{ contains(steps.package.outputs.path, 'edge') && 'edge' || 'stable' }}" >> $GITHUB_OUTPUT

      - name: Remove previous Chart
        if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
        run: rm -f ${{ github.workspace }}/helm-charts/edge/nginx-ingress-0.0.0-edge.tgz

      - name: Push Helm Chart to Helm Charts Repository
        run: |
          mv ${{ steps.package.outputs.path }} ${{ github.workspace }}/helm-charts/${{ steps.package-helm.outputs.type }}/
          cd ${{ github.workspace }}/helm-charts
          helm repo index ${{ steps.package-helm.outputs.type }} --url https://helm.nginx.com/${{ steps.package-helm.outputs.type }}
          git add -A
          git -c user.name='NGINX Kubernetes Team' -c user.email='kubernetes@nginx.com' \
          commit -m "NGINX Ingress Controller - Release ${{ steps.package-helm.outputs.type }} ${{ steps.package-helm.outputs.version }}"
          git push -u origin master
